[
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security.oauth2",
        "description": "fastapi.security.oauth2",
        "isExtraImport": true,
        "detail": "fastapi.security.oauth2",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "isExtraImport": true,
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "RealDictCursor",
        "importPath": "psycopg2.extras",
        "description": "psycopg2.extras",
        "isExtraImport": true,
        "detail": "psycopg2.extras",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy.sql.sqltypes",
        "description": "sqlalchemy.sql.sqltypes",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.sqltypes",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app.routers.auth",
        "description": "app.routers.auth",
        "peekOfCode": "def login(user_credentials:OAuth2PasswordRequestForm = Depends(),db: Session = Depends(database.get_db)):\n   user= db.query(models.User).filter(models.User.email==user_credentials.username).first()\n   if not user:\n       raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,detail=f\"Invalid Credentials \")\n   if  not utils.verify(user_credentials.password,user.password):\n       raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,detail=f\"Invalid Credentials \")\n    #create token\n    #return token\n   access_token= oauth2.create_access_token(data={\"user_id\":user.id})\n   return{\"access_token\": access_token,\"token_type\":\"bearer\"}",
        "detail": "app.routers.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.auth",
        "description": "app.routers.auth",
        "peekOfCode": "router = APIRouter(\n    tags=['Authentication']\n)\n@router.post('/login',response_model=schemas.Token)\ndef login(user_credentials:OAuth2PasswordRequestForm = Depends(),db: Session = Depends(database.get_db)):\n   user= db.query(models.User).filter(models.User.email==user_credentials.username).first()\n   if not user:\n       raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,detail=f\"Invalid Credentials \")\n   if  not utils.verify(user_credentials.password,user.password):\n       raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,detail=f\"Invalid Credentials \")",
        "detail": "app.routers.auth",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def get(db: Session = Depends(get_db),current_user: int = Depends\n                 (oauth2.get_current_user),limit: int=10,skip: int= 0, search:Optional[str]= \"\"):\n    #posts=db.query(models.post).filter(models.post.title.contains(search)).limit(limit).offset(skip).all()#filter(models.post.owner_id == current_user.id).all()\n    posts = db.query(models.post,func.count(models.Vote.post_id).label(\"votes\")).join(\n        models.Vote,models.Vote.post_id == models.post.id,isouter=True).group_by(models.post.id).filter(\n            models.post.title.contains(search)).limit(limit).offset(skip).all()\n    return posts\n@router.post(\"/\",status_code=status.HTTP_201_CREATED,response_model=schemas.PostResponse)\ndef create_posts(post: schemas.PostCreate,db: Session = Depends(get_db),current_user: int = Depends\n                 (oauth2.get_current_user)):  ",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "create_posts",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def create_posts(post: schemas.PostCreate,db: Session = Depends(get_db),current_user: int = Depends\n                 (oauth2.get_current_user)):  \n    post = models.post(owner_id = current_user.id, **post.dict())\n    db.add(post)\n    db.commit()\n    db.refresh(post)\n    return post\n@router.get(\"/{id}\",response_model=schemas.PostVote)\ndef get_posts( id: int,db: Session = Depends(get_db),current_user: int = Depends\n                 (oauth2.get_current_user)):",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "get_posts",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def get_posts( id: int,db: Session = Depends(get_db),current_user: int = Depends\n                 (oauth2.get_current_user)):\n    #posts=db.query(models.post).filter(models.post.id == id).first()\n    posts= db.query(models.post,func.count(models.Vote.post_id).label(\"votes\")).join(\n        models.Vote,models.Vote.post_id == models.post.id,isouter=True).group_by(models.post.id).first()\n    if not posts:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"post with {id} was not found\")\n    # if posts.owner_id != current_user.id:\n       # raise HTTPException(status_code=status.HTTP_403_FORBIDDEN,",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "delete_posts",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def delete_posts(id: int,db: Session = Depends(get_db),current_user: int = Depends\n                 (oauth2.get_current_user)):\n    #cursor.execute(\"\"\"DELETE FROM posts WHERE  id= %s RETURNING *\"\"\",(str(id),))\n    #deleted_post = cursor.fetchone()\n    #conn.commit()\n    deleted_post_query = db.query(models.post).filter(models.post.id == id)\n    deleted_post = deleted_post_query.first()\n    if deleted_post == None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"post with id:{id} does not exit \")",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "update_posts",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def update_posts(id: int, updated_post:schemas.PostCreate,db: Session = Depends(get_db),current_user: int = Depends\n                 (oauth2.get_current_user)):\n    #cursor.execute(\"\"\"UPDATE posts SET title= %s, content=%s WHERE id=%s returning *\"\"\",\n                   #(post.title,post.content,(str(id))))\n    #updated_post= cursor.fetchone()\n    #conn.commit()\n    query_post=db.query(models.post).filter(models.post.id == id)\n    post=query_post.first()\n    if post == None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/posts\",\n    tags=['Posts']\n)\n@router.get(\"/\",response_model=List[schemas.PostVote])\ndef get(db: Session = Depends(get_db),current_user: int = Depends\n                 (oauth2.get_current_user),limit: int=10,skip: int= 0, search:Optional[str]= \"\"):\n    #posts=db.query(models.post).filter(models.post.title.contains(search)).limit(limit).offset(skip).all()#filter(models.post.owner_id == current_user.id).all()\n    posts = db.query(models.post,func.count(models.Vote.post_id).label(\"votes\")).join(\n        models.Vote,models.Vote.post_id == models.post.id,isouter=True).group_by(models.post.id).filter(",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def create_user(user: schemas.UserCreate,db: Session = Depends(get_db),):  \n    hashed_password=utils.hash(user.password)\n    user.password=hashed_password\n    new_user = models.User(**user.dict())\n    db.add(new_user)\n    db.commit()\n    db.refresh(new_user)\n    return new_user\n@router.get(\"/{id}\",response_model=schemas.UserResponse)\ndef get_user( id: int,db: Session = Depends(get_db),current_user: int = Depends",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def get_user( id: int,db: Session = Depends(get_db),current_user: int = Depends\n                 (oauth2.get_current_user)):\n    users=db.query(models.User).filter(models.User.id == id).first()\n    if not users:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"user with {id} was not found\")\n    return users",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/users\",\n    tags=['Users']\n)\n@router.post(\"/\",status_code=status.HTTP_201_CREATED,response_model=schemas.UserResponse)\ndef create_user(user: schemas.UserCreate,db: Session = Depends(get_db),):  \n    hashed_password=utils.hash(user.password)\n    user.password=hashed_password\n    new_user = models.User(**user.dict())\n    db.add(new_user)",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "vote",
        "kind": 2,
        "importPath": "app.routers.vote",
        "description": "app.routers.vote",
        "peekOfCode": "def vote(vote: schemas.vote, db: Session = Depends(database.get_db), current_user: int=Depends(oauth2.get_current_user)):\n    post = db.query(models.post).filter(models.post.id == vote.post_id).first()\n    if not post:\n        raise HTTPException(status_code = status.HTTP_404_NOT_FOUND, detail = f\"post with id:{vote.post_id} does not exist\")\n    vote_query = db.query(models.Vote).filter(models.Vote.post_id== vote.post_id, \n                                              models.Vote.user_id== current_user.id)\n    found_vote = vote_query.first()\n    if (vote.dir == 1):\n        if found_vote:\n            raise HTTPException(status_code= status.HTTP_409_CONFLICT,",
        "detail": "app.routers.vote",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class Settings(BaseSettings):\n    database_hostname: str\n    database_port: str\n    database_password: str\n    database_username: str\n    database_name: str\n    secret_key: str\n    algorithm: str\n    access_token_expire_minutes: int\n    class Config:",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\nwhile True:\n     try:\n        conn = psycopg2.connect(host = settings.database_hostname,database = settings.database_name, \n                            user = settings.database_username, password = settings.database_password,cursor_factory=RealDictCursor)",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = f'postgresql://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}'\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\nwhile True:",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\nwhile True:\n     try:",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "Base = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\nwhile True:\n     try:\n        conn = psycopg2.connect(host = settings.database_hostname,database = settings.database_name, ",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "get_posts",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def get_posts():\n    return{\"message\":\"hellow mijan\"}",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\norigins=[\"*\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\napp.include_router(post.router)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "post",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class post(Base):\n    __tablename__=\"posts\"\n    id= Column(Integer,primary_key=True,nullable=False)\n    title=Column(String,nullable=False)\n    content=Column(String,nullable=False)\n    published=Column(Boolean,server_default='TRUE',nullable=False)\n    created_at=Column(TIMESTAMP(timezone=True),nullable=False,server_default=text('now()'))\n    owner_id = Column(Integer, ForeignKey(\"users.id\",ondelete=\"CASCADE\"), nullable= False )\n    owner = relationship(\"User\")\nclass User(Base):",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class User(Base):\n    __tablename__=\"users\"\n    id=Column(Integer,primary_key=True, nullable=False)\n    email=Column(String, nullable=False, unique=True)\n    password=Column(String, nullable=False)\n    created_at=Column(TIMESTAMP(timezone=True),nullable=False,server_default=text('now()'))\n    name=Column(String)\nclass Vote(Base):\n    __tablename__=\"votes\"\n    user_id =Column(Integer, ForeignKey(\"users.id\",ondelete=\"CASCADE\"),primary_key=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Vote",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Vote(Base):\n    __tablename__=\"votes\"\n    user_id =Column(Integer, ForeignKey(\"users.id\",ondelete=\"CASCADE\"),primary_key=True)\n    post_id =Column(Integer,ForeignKey(\"posts.id\",ondelete=\"CASCADE\"),primary_key=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "def create_access_token(data: dict):\n    to_encode= data.copy()\n    expire= datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\":expire})\n    encoded_jwt=jwt.encode(to_encode,SECRET_KEY,algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_acces_token(token:str,credentials_exception):\n    try:\n        payload = jwt.decode(token,SECRET_KEY,algorithms=[ALGORITHM])\n        id:str = payload.get(\"user_id\")",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "verify_acces_token",
        "kind": 2,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "def verify_acces_token(token:str,credentials_exception):\n    try:\n        payload = jwt.decode(token,SECRET_KEY,algorithms=[ALGORITHM])\n        id:str = payload.get(\"user_id\")\n        if id is None:\n            raise credentials_exception\n        token_data = schemas.TokenData(id=id)    \n    except JWTError:\n        raise credentials_exception\n    return token_data",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "def get_current_user(token: str = Depends(oauth2_scheme),db: Session = Depends(database.get_db)):\n    credential_exception = HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,detail=\n                        f\"could not validate credentials\",headers ={\"www-Authenticate\":\"Bearer\"})\n    token = verify_acces_token(token,credential_exception)\n    user = db.query(models.User).filter(models.User.id == token.id).first()\n    return user",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl ='login')\nSECRET_KEY = settings.secret_key\nALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode= data.copy()\n    expire= datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\":expire})\n    encoded_jwt=jwt.encode(to_encode,SECRET_KEY,algorithm=ALGORITHM)\n    return encoded_jwt",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "SECRET_KEY = settings.secret_key\nALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode= data.copy()\n    expire= datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\":expire})\n    encoded_jwt=jwt.encode(to_encode,SECRET_KEY,algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_acces_token(token:str,credentials_exception):",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "ALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode= data.copy()\n    expire= datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\":expire})\n    encoded_jwt=jwt.encode(to_encode,SECRET_KEY,algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_acces_token(token:str,credentials_exception):\n    try:",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode= data.copy()\n    expire= datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\":expire})\n    encoded_jwt=jwt.encode(to_encode,SECRET_KEY,algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_acces_token(token:str,credentials_exception):\n    try:\n        payload = jwt.decode(token,SECRET_KEY,algorithms=[ALGORITHM])",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "PostBase",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class PostBase(BaseModel):\n    title:str\n    content:str\n    published: bool = True\nclass PostCreate(PostBase):\n   pass\nclass UserResponse(BaseModel):\n    email:EmailStr\n    created_at: datetime\n    id:int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "PostCreate",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class PostCreate(PostBase):\n   pass\nclass UserResponse(BaseModel):\n    email:EmailStr\n    created_at: datetime\n    id:int\n    class Config:\n        orm_mode = True\nclass PostResponse(PostBase):",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserResponse(BaseModel):\n    email:EmailStr\n    created_at: datetime\n    id:int\n    class Config:\n        orm_mode = True\nclass PostResponse(PostBase):\n    created_at: datetime\n    id:int\n    owner_id: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "PostResponse",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class PostResponse(PostBase):\n    created_at: datetime\n    id:int\n    owner_id: int\n    owner :UserResponse\n    class Config:\n        orm_mode = True\nclass PostVote(BaseModel):\n    post:PostResponse\n    votes:int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "PostVote",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class PostVote(BaseModel):\n    post:PostResponse\n    votes:int\n    class Config:\n        orm_mode = True\nclass UserCreate(BaseModel):\n    email:EmailStr\n    password:str",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserCreate(BaseModel):\n    email:EmailStr\n    password:str\n    class Config:\n        orm_mode = True\nclass UserLogin(BaseModel):\n    email:EmailStr\n    password:str\nclass Token(BaseModel):\n    access_token:str",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserLogin(BaseModel):\n    email:EmailStr\n    password:str\nclass Token(BaseModel):\n    access_token:str\n    token_type:str\nclass TokenData(BaseModel):\n    id:Optional[int] = None\nclass vote(BaseModel):\n    post_id: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Token(BaseModel):\n    access_token:str\n    token_type:str\nclass TokenData(BaseModel):\n    id:Optional[int] = None\nclass vote(BaseModel):\n    post_id: int\n    dir: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class TokenData(BaseModel):\n    id:Optional[int] = None\nclass vote(BaseModel):\n    post_id: int\n    dir: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "vote",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class vote(BaseModel):\n    post_id: int\n    dir: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "hash",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def hash(password:str):\n    return pwd_context.hash(password)\ndef verify(plain_password,hashed_password):\n    return pwd_context.verify(plain_password,hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "verify",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def verify(plain_password,hashed_password):\n    return pwd_context.verify(plain_password,hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef hash(password:str):\n    return pwd_context.hash(password)\ndef verify(plain_password,hashed_password):\n    return pwd_context.verify(plain_password,hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "dbalembic.versions.663c9d4742cf_add_auto_votes",
        "description": "dbalembic.versions.663c9d4742cf_add_auto_votes",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('votes',\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.Column('post_id', sa.Integer(), nullable=False),\n    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),\n    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),\n    sa.PrimaryKeyConstraint('user_id', 'post_id')\n    )\n    # ### end Alembic commands ###",
        "detail": "dbalembic.versions.663c9d4742cf_add_auto_votes",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "dbalembic.versions.663c9d4742cf_add_auto_votes",
        "description": "dbalembic.versions.663c9d4742cf_add_auto_votes",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('votes')\n    # ### end Alembic commands ###",
        "detail": "dbalembic.versions.663c9d4742cf_add_auto_votes",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "dbalembic.env",
        "description": "dbalembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "dbalembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "dbalembic.env",
        "description": "dbalembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "dbalembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "dbalembic.env",
        "description": "dbalembic.env",
        "peekOfCode": "config = context.config\nconfig.set_main_option(\"sqlalchemy.url\",f'postgresql+psycopg2://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}')\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "dbalembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "dbalembic.env",
        "description": "dbalembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "dbalembic.env",
        "documentation": {}
    }
]